# ifndef H_GOO_PARAMETERS_DICTIONARY_INSERTION_PROXY_H
# define H_GOO_PARAMETERS_DICTIONARY_INSERTION_PROXY_H

# include <stack>

# include "goo_exception.hpp"
# include "goo_dict/parameter.tcc"
# include "goo_dict/dict.hpp"
# include "goo_dict/parameters/logic.hpp"
# include "goo_dict/parameters/integral.tcc"
# include "goo_dict/parameters/floating_point.tcc"
# include "goo_dict/parameters/string.hpp"
# include "goo_dict/parameters/los.hpp"

namespace goo {
namespace dict {

class LoDInsertionProxy;

/**@brief Helper class for parameter insertion.
 *
 * The typical lifetime of is instances is following:
 *  1. Instance first is created with `Configuration` class `insertion_proxy()`
 *     method.
 *  2. Then parameters are added using this instance with various appropriate
 *     methods like `p()`, `flag()` and `list()`.
 *  3. Insertion proxy then may be safely deleted.
 *
 * Note that `bgn_sect()` and `end_sect()` methods have to be paired --- i.e.
 * each created sub-section must be closed.
 *
 * Note, that to prevent user code from possible mistakes, positional arguments
 * have to be added with own `Configuration` setter method
 * `positional_arguments()`.
 * */
class DictInsertionProxy {
    friend class Configuration;
    friend class DictionaryParameter;
    friend class LoDInsertionProxy;
public:
    class InsertionTarget {
    public:
        typedef Parameter<List<iAbstractParameter*> > LOS;
    private:
        union {
            DictionaryParameter * _dPtr;
            LOS * _losPtr;
        };
        bool _isDict;
    public:
        InsertionTarget( DictionaryParameter * dPtr ) : _dPtr(dPtr), _isDict(true) {}
        InsertionTarget( LOS * losPtr ) : _losPtr(losPtr), _isDict(false) {}

        DictionaryParameter & dict();
        LOS & list();
        bool is_dict() const { return  _isDict; }
        bool is_list() const { return !_isDict; }
    };
private:
    std::stack<InsertionTarget> _stack;
protected:
    /// Constructs new insertion proxy insance.
    DictInsertionProxy( DictionaryParameter * );
    /// Protected ctr used by list insertion proxy.
    DictInsertionProxy( const std::stack<InsertionTarget> & los) : _stack(los) {}
public:
    /// Copy ctr. Similar to default implementation generated by GCC.
    DictInsertionProxy( const DictInsertionProxy & o ) : _stack(o._stack) {}
    /// Opens new section.
    DictInsertionProxy & bgn_sect( const char *, const char * );

    /// Closes most recent section and switches to its previous
    /// (or finalizes last). Argument is optional and useful for self-check.
    DictInsertionProxy & end_sect( const char * = nullptr );

    /// Used to "close" dictionary insertion within list parent.
    LoDInsertionProxy end_dict( const char * = nullptr );  // TODO

    /// Marks the last inserted parameter as mandatory one.
    DictInsertionProxy & required_argument();

    /// Marks the last inserted logical argument as mandatory one.
    /// newName may be null if name has to be preserved.
    void insert_copy_of( const iSingularParameter &, const char * newName=nullptr );

    //
    // Parameter inserter
    //

    template<typename ParameterT, class ... Types> DictInsertionProxy &
    p( Types ... args ) {
        auto * p = new InsertableParameter<ParameterT>( args ... );
        p->_check_initial_validity();
        _stack.top().dict().insert_parameter( p );
        return *this;
    }

    template<class ... Types> DictInsertionProxy &
    flag( Types ... args ) {
        Parameter<bool> * newParameterPtr = new Parameter<bool>( args ... );
        newParameterPtr->reset_flag();
        newParameterPtr->_check_initial_validity();
        _stack.top().dict().insert_parameter( newParameterPtr );
        return *this;
    }

    //
    // List inserters
    //

    template<typename ParameterT> DictInsertionProxy &
    array( char shortcut
         , const char * name
         , const char * description
         , const std::initializer_list<ParameterT> & dfts ) {
        _stack.top().dict().insert_parameter(
                new Parameter<List<ParameterT> >( dfts, shortcut, name, description )
            );
        return *this;
    }

    template<typename ParameterT> DictInsertionProxy &
    array( const char * name
         , const char * description
         , const std::initializer_list<ParameterT> & dfts ) {
        _stack.top().dict().insert_parameter(
                new Parameter<List<ParameterT> >( dfts, name, description )
            );
        return *this;
    }

    template<typename ParameterT> DictInsertionProxy &
    array( char shortcut
         , const char * description
         , const std::initializer_list<ParameterT> & dfts ) {
        _stack.top().dict().insert_parameter(
                new Parameter<List<ParameterT> >( dfts, shortcut, description )
            );
        return *this;
    }

    template<typename ParameterT> DictInsertionProxy &
    array( char shortcut
         , const char *name
         , const char *description ) {
        _stack.top().dict().insert_parameter(
                new Parameter<List<ParameterT> >( shortcut, name, description )
            );
        return *this;
    }

    template<typename ParameterT> DictInsertionProxy &
    array( const char *name
         , const char *description ) {
        _stack.top().dict().insert_parameter(
                new Parameter<List<ParameterT> >( name, description )
            );
        return *this;
    }

    template<typename ParameterT> DictInsertionProxy &
    array( char shortcut
         , const char *description ) {
        _stack.top().dict().insert_parameter(
                new Parameter<List<ParameterT> >( shortcut, description )
            );
        return *this;
    }

    /// Declares the list of dictionaries parameter and returns its insertion
    /// proxy object.
    LoDInsertionProxy bgn_list( const char *
                              , const char * );

    //LoDInsertionProxy end_dict();
};  // class DictInsertionProxy

class LoDInsertionProxy {
    friend class Configuration;
    friend class DictionaryParameter;
    friend class DictInsertionProxy;
public:
    typedef DictInsertionProxy::InsertionTarget InsertionTarget;
private:
    std::stack<InsertionTarget> _stack;
protected:
    LoDInsertionProxy() {}
    LoDInsertionProxy( const std::stack<InsertionTarget> & st ) : _stack(st) {}
public:
    /// Closes the LoD and pops insertion targets stack when LoD was created
    /// within dictionary.
    DictInsertionProxy end_list( const char * );

    /// Inserts a dictionary and returns an insertion proxy for on it.
    DictInsertionProxy bgn_dict();

    /// Insert (anonymous) parameter in list.
    template<typename T> LoDInsertionProxy & v( const T & );

    /// Used to "open" new list insertion within current list.
    LoDInsertionProxy bgn_sublist();

    /// Used to "close" list insertion within other list.
    LoDInsertionProxy end_sublist();
};

}  // namespace goo
}  // namespace dict

# endif  // H_GOO_PARAMETERS_DICTIONARY_INSERTION_PROXY_H

